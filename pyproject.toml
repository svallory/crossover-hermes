[project]
name = "hermes"
version = "0.1.0"
description = "Humanlike Email Responses for Magically Empathic Sales"
readme = "README.md"
requires-python = ">=3.11.12"
dependencies = [
    "poethepoet>=0.34.0",
    "pandas>=2.2.0",
    "openai>=1.0.0",
    "gspread>=6.0.0",
    "gspread-dataframe>=4.0.0",
    "google-auth>=2.0.0",
    "google-auth-oauthlib>=1.0.0",
    "google-auth-httplib2>=0.2.0",
    "pydantic>=2.0.0",
    "langchain>=0.3.0",
    "langchain-openai>=0.3.0",
    "python-dotenv>=1.0.0",
    "nest-asyncio>=1.6.0",
    "langchain-google-genai>=2.0.0",
    "langgraph>=0.4.0",
    "langsmith>=0.3.0",
    "pydrive2>=1.21.0",
    "oauth2client>=4.0.0",
    "langchain-core>=0.3.60",
    "chromadb>=1.0.9",
    "PyYAML>=6.0",
    "sentence-transformers>=4.0.0",
    "openevals>=0.1.0",
    "langgraph-cli[inmem]>=0.2.10",
    "mypy>=1.15.0",
    "pandas-stubs>=2.2.3.250308",
    "thefuzz>=0.22.1",
    "tabulate>=0.9.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.23.3",
    "typing-extensions>=4.13.2",
    "dotenv>=0.9.9",
]

[project.scripts]
hermes = "hermes.cli:main"

[tool.setuptools.packages.find]
include = ["hermes*"]
exclude = ["data*", "output*", "chroma_db*", "notebooks*", "docs*", "tests*", "tools*"]

[tool.poe.tasks]
load_env = { shell = "source .env && export $(grep -v '^#' .env | xargs)", interpreter = "bash" }
dev-graph = "langgraph dev"
hermes = "python -m hermes"
run-workflow = "poe load_env && python -m tools.run_workflow"

check = "poe lint && poe load_env && poe test"
lint = "ruff check ."
format = "ruff format ."

test = "pytest -v"
evaluate = "python -m tools.evaluate.main --dataset-id b43d1e52-72ae-47c8-9a49-55198eb6dd87 --auto-upload"

[dependency-groups]
dev = [
    "basedpyright>=1.29.1",
    "ipykernel>=6.29.5",
    "ipython>=9.2.0",
    "ipywidgets>=8.1.7",
    "markdown>=3.8",
    "mypy>=1.15.0",
    "pygments>=2.19.1",
    "pytest>=8.3.5",
    "ruff>=0.11.10",
]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
exclude = [
    "notebooks",
    "docs",
]

line-length = 120
indent-width = 4

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = 88

[tool.ruff.lint]
ignore = [
  "UP038"
]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "DOC",  # Pydoclint
    # "D",  # Pydocstyle
    "ERA", # commented out code
    "F",  # pyflakes
    "I",  # isort
    "UP", # pyupgrade
    "C901", # too complex
    "PD", # Pandas
    "PERF", # performance
    "PLR", # PyLint
    # "TRY", # Tryceratops https://docs.astral.sh/ruff/rules/#tryceratops-try
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore `F403` (don't use import *) in all `__init__.py` files.
"__init__.py" = ["F403"]

[tool.ruff.lint.isort]
known-first-party = ["src", "hermes"]
case-sensitive = true
lines-after-imports = 1
